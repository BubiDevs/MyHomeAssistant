# Gestione spazzatura
- id: home_recycling.notify
  alias: 'Home recycling: notify tomorrow pickup'
  trigger:
    platform: time
    at: '20:00'
  condition: []
  action:
    service: home_recycling.notification

- id: home_recycling.set_states
  alias: 'Home recycling: set tomorrow pickup states'
  trigger:
    - platform: time
      at: '07:00'
    - platform: homeassistant
      event: start
  condition: []
  action:
    service: home_recycling.collections_state

# Download MagPi issues
- id: magpi_downloader.check_and_download
  alias: 'MagPi: download new MagPi issues (if available)'
  trigger:
    platform: time
    at: '08:00'
  condition: []
  action:
    service: magpi_downloader.downloader

# HomeAssistant notifications
- id: home_assistant.update_available
  alias: 'HA: update available notification'
  trigger:
    - platform: state
      entity_id: sensor.ha_upstream_version
  condition:
    - condition: template
      value_template: "{{ trigger.to_state.state != 'unknown' }}"
    - condition: template
      value_template: "{{ trigger.to_state.state != 'unavailable' }}"
    - condition: template
      value_template: '{{ trigger.to_state.state != states.sensor.ha_installed_version.state }}'
  action:
    service: notify.home_telegram
    data_template:
      message: "È disponibile l'aggiornamento {{ trigger.to_state.state }} per Home Assistant!"

- id: home_assistant.startup
  alias: 'HA: startup notification'
  hide_entity: true
  trigger:
    platform: homeassistant
    event: start
  action:
    service: notify.andrea_telegram
    data:
      message: 'Home Assistant è stato riavviato, ora è di nuovo funzionante!'

# JarvisBOT: comandi Telegram a cui Jarvis può rispondere
- id: 'jarvisbot.ping'
  alias: 'JarvisBOT: reply pong to ping'
  hide_entity: true
  trigger:
    platform: event
    event_type: telegram_command
    event_data:
      command: '/ping'
  action:
    service: telegram_bot.send_message
    data_template:
      target: '{{ trigger.event.data.chat_id }}'
      message: 'Pong!'

- id: 'jarvisbot.temperature'
  alias: 'JarvisBOT: current home temperature'
  hide_entity: true
  trigger:
    platform: event
    event_type: telegram_command
    event_data:
      command: '/temperature'
  action:
    service: telegram_bot.send_message
    data_template:
      target: '{{ trigger.event.data.chat_id }}'
      message: 'La temperatura corrente è di {{ states.sensor.dht_sensor_temperature.state_with_unit }}'

- id: 'jarvisbot.camera_picture'
  alias: 'JarvisBOT: send current camera picture'
  hide_entity: true
  trigger:
    platform: event
    event_type: telegram_command
    event_data:
      command: '/camera'
  action:
    service: telegram_bot.send_photo
    data:
      url: http://192.168.1.100:8123/api/camera_proxy/camera.soggiorno
      caption: 'Situazione attuale del soggiorno'

- id: 'jarvisbot.hello'
  alias: 'JarvisBOT: say hello'
  hide_entity: true
  trigger:
    - platform: event
      event_type: telegram_text
      event_data:
        text: 'Jarvis'
    - platform: event
      event_type: telegram_command
      event_data:
        command: '/hello'
  action:
    service: telegram_bot.send_message
    data_template:
      target: '{{ trigger.event.data.chat_id }}'
      message: 'Ciao {{ trigger.event.data.from_first }}!'

#SSL Certificate renew
- id: 'sslcert_renew'
  alias: 'SSL Certificate: Auto Renew SSL'
  trigger:
    platform: numeric_state
    entity_id: sensor.ssl_cert_expiry
    below: 29
  action:
    service: shell_command.renew_ssl

- id: 'sslcert_notification'
  alias: 'SSL Certificate: expiration notification'
  trigger:
    platform: numeric_state
    entity_id: sensor.ssl_cert_expiry
    below: 21
  action:
    service: notify.andrea_telegram
    data:
      message: 'Il certificato SSL scadrà fra 21 giorni e non è ancora stato rinnovato in automatico!'

#Update Christmass Tree from Sonoff
- id: 'sonoff_1_christmass_tree_on'
  alias: 'Sonoff 1: When is turned on, update Christmass Tree status'
  trigger:
    platform: state
    entity_id: input_boolean.sonoff_1
    to: 'on'
  action:
    service: input_boolean.turn_on
    entity_id: input_boolean.christmas_tree

- id: 'sonoff_1_christmass_tree_off'
  alias: 'Sonoff 1: When is turned off, update Christmass Tree status'
  trigger:
    platform: state
    entity_id: input_boolean.sonoff_1
    to: 'off'
  action:
    service: input_boolean.turn_off
    entity_id: input_boolean.christmas_tree

