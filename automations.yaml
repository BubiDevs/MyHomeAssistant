# Gestione spazzatura
- id: 'home_recycling_notify'
  alias: Recycling, evening notification
  initial_state: true
  trigger:
  - at: '20:00'
    platform: time
  condition: []
  action:
  - service: home_recycling.notification

- id: 'home_recycling_states_start'
  alias: Recycling, set states (morning)
  initial_state: true
  trigger:
  - at: '07:00'
    platform: time  
  condition: []
  action:
  - service: home_recycling.collections_state

- id: 'home_recycling_states_morning'
  alias: Recycling, set states (startup)
  initial_state: true
  trigger:
  - event: start
    platform: homeassistant
  condition: []
  action:
  - service: home_recycling.collections_state

# Giardinaggio
- id: 'garden_water'
  alias: Garden, water the plants
  initial_state: true
  trigger:
  - at: '20:30'
    platform: time
  condition:
  - condition: time
    weekday:
    - mon
    - thu
  action:
  - data:
      message: È il momento di bagnare le piante aromatiche!
    service: notify.home_tg

- id: 'garden_water_saturday'
  alias: Garden, water the plants (saturday)
  initial_state: true
  trigger:
  - at: '14:30'
    platform: time
  condition:
  - condition: time
    weekday:
    - sat
  action:
  - data:
      message: È il momento di bagnare le piante aromatiche!
    service: notify.home_tg

# Download MagPi issues
- id: 'magpi_downloader_check'
  alias: MagPi, check and download
  initial_state: true
  trigger:
  - at: '08:00'
    platform: time  
  condition: []
  action:
  - service: magpi_downloader.downloader

# HomeAssistant notifications
- id: 'ha_check_update'
  alias: HomeAssistant, check available update
  initial_state: true
  trigger:
  - entity_id: sensor.ha_upstream_version
    platform: state  
  condition:
  - condition: template
    value_template: "{{ trigger.to_state.state != 'unknown' }}"
  - condition: template
    value_template: "{{ trigger.to_state.state != 'unavailable' }}"
  - condition: template
    value_template: "{{ trigger.to_state.state != states.sensor.ha_installed_version.state }}"
  action:
  - data_template:
      title: Home Assistant
      message: Update {{ trigger.to_state.state }} is available for Home Assistant!
      data:
        url: "https://github.com/home-assistant/home-assistant/releases/tag/{{ trigger.to_state.state }}"
    service: notify.pushover
    
- id: 'ha_startup'
  alias: HomeAssistant, started notification
  initial_state: true
  trigger:
  - event: start
    platform: homeassistant
  condition: []
  action:
  - data:
      title: Home Assistant
      message: Home Assistant has been restarted, now it's up and running!
    service: notify.pushover

# Turn off 'Libro' sonoff after 20 minutes during the night
- id: 'libro_turn_off'
  alias: Turn off Libro during the night
  trigger:
    platform: state
    entity_id: switch.sonoff_10004cf9ff
    to: 'on'
    for:
      minutes: 20
  condition:
    condition: time
    after: '23:00'
    before: '05:00'
  action:
  - service: homeassistant.turn_off
    entity_id: switch.sonoff_10004cf9ff
  - service: notify.home_tg
    data:
      message: Nara ha mangiato anche stanotte

# Turn off Christmas Tree ad 01 am
- id: 'christmas_tree_auto_turnoff'
  alias: 'Christmas Tree: turn off at 01:00 am'
  initial_state: true
  trigger:
  - platform: time
    at: '01:00:00'
  condition: []
  action:
  - service: homeassistant.turn_off
    entity_id: switch.sonoff_10001f9bcf
  
# JarvisBOT: comandi Telegram a cui Jarvis può rispondere
- id: 'jarvisbot_ping'
  alias: 'JarvisBOT: /ping'
  hide_entity: true
  trigger:
  - platform: event
    event_type: telegram_command
    event_data:
      command: '/ping'
  action:
  - service: telegram_bot.send_message
    data_template:
      target: '{{ trigger.event.data.chat_id }}'
      message: 'Pong!'

- id: 'jarvisbot_temperature'
  alias: 'JarvisBOT: /temperature'
  hide_entity: true
  trigger:
  - platform: event
    event_type: telegram_command
    event_data:
      command: '/temperature'
  action:
  - service: telegram_bot.send_message
    data_template:
      target: '{{ trigger.event.data.chat_id }}'
      message: 'La temperatura corrente è di {{ states.sensor.dht_sensor_temperature.state_with_unit }}'

- id: 'jarvisbot_camera_picture'
  alias: 'JarvisBOT: /camera'
  hide_entity: true
  trigger:
  - platform: event
    event_type: telegram_command
    event_data:
      command: '/camera'
  action:
  - service: telegram_bot.send_photo
    data:
      url: http://127.0.0.1/api/camera_proxy/camera.soggiorno
      caption: 'Situazione attuale del soggiorno'

- id: 'jarvisbot_hello'
  alias: 'JarvisBOT: /hello'
  hide_entity: true
  trigger:
  - platform: event
    event_type: telegram_text
    event_data:
      text: 'Jarvis'
  - platform: event
    event_type: telegram_command
    event_data:
      command: '/hello'
  action:
  - service: telegram_bot.send_message
    data_template:
      target: '{{ trigger.event.data.chat_id }}'
      message: 'Ciao {{ trigger.event.data.from_first }}!'

# IFTTT
- id: 'ifttt_webhook'
  alias: IFTTT, handle incoming webhooks
  initial_state: true
  trigger:
  - platform: event
    event_type: ifttt_webhook_received
    event_data:
      action: call_service
  action:
  - service_template: '{{ trigger.event.data.service }}'
    data_template:
      entity_id: '{{ trigger.event.data.entity_id }}'
