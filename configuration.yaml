homeassistant:
  # Name of the location where Home Assistant is running
  name: Home
  # Location required to calculate the time the sun rises and sets
  latitude: !secret home_latitude
  longitude: !secret home_longitude
  elevation: !secret home_elevation
  unit_system: metric
  time_zone: Europe/Rome

  # Customization file
  customize: !include customize.yaml


# Enables configuration UI
config:

# Enable System Health component
system_health:

# Public access to HA
http:
  base_url: !secret http_public_url

# Checks for available updates
updater:
  include_used_components: true

# Discover some devices automatically
discovery:

# Allows you to issue voice commands from the frontend in enabled browsers
conversation:

# Enables support for tracking state changes over time
history:

# View all events in a logbook
logbook:

# Enables a map showing the location of tracked devices
map:

# Track the sun
sun:

# Enable logger and ignore events lower than critical for specified components
logger:
  default: warning
  logs:
    homeassistant.components.media_player.plex: critical

# Enable and use FFMPEG installed on system
ffmpeg:
  ffmpeg_bin: /usr/bin/ffmpeg

sensor:
  - platform: yr                # weather forecast
#  - platform: dht               # temperature and humidity sensor
#    sensor: DHT11
#    pin: 15
#    scan_interval: 900
#    monitored_conditions:
#      - temperature
#      - humidity
  - platform: systemmonitor     # RaspberryPi system monitoring
    resources:
      - type: last_boot
      - type: memory_use_percent
      - type: processor_use
  - platform: rest              # HomeAssistant upstream version
    resource: https://pypi.python.org/pypi/homeassistant/json
    name: ha_upstream_version
    value_template: '{{ value_json.info.version }}'
    scan_interval: 3600
  - platform: command_line      # HomeAssistant installed version
    name: ha_installed_version
    command: "cat /config/.HA_VERSION"
    scan_interval: 3600
  - platform: darksky
    api_key: !secret darksky_key
    forecast:
      - 0
    monitored_conditions:
      - summary
      - icon
      - temperature
      - humidity
      - temperature_high
      - temperature_low
      - precip_probability
    language: it
    scan_interval: '01:00'
  - platform: template          
    sensors:
      home_recycling_types:
        value_template: >-
          {% if is_state('sensor.home_recycling_bin_types', '') %}
            Niente in raccolta
          {% else %}
            {{ states('sensor.home_recycling_bin_types') }}
          {% endif %}
      home_recycling_date:
        value_template: >-
          {{ states('sensor.home_recycling_bin_date') }}
      forecast_temperatures:
        value_template: >-
          {{ states.sensor.dark_sky_daytime_high_temperature_0d.state_with_unit }} / {{ states.sensor.dark_sky_overnight_low_temperature_0d.state_with_unit }}
      forecast_today_summary:
        value_template: >-
          {{  states.sensor.dark_sky_summary.state }}
        icon_template: >-
          {% if is_state("sensor.dark_sky_icon", "clear-day") %}
            mdi:weather-sunny
          {% elif is_state("sensor.dark_sky_icon", "clear-night") %}
            mdi:weather-night
          {% elif is_state("sensor.dark_sky_icon", "cloudy") %}
            mdi:weather-cloudy   
          {% elif is_state("sensor.dark_sky_icon", "rain") %}
            mdi:weather-pouring        
          {% elif is_state("sensor.dark_sky_icon", "sleet") %}
            mdi:weather-snowy-rain
          {% elif is_state("sensor.dark_sky_icon", "snow") %}
            mdi:weather-snowy
          {% elif is_state("sensor.dark_sky_icon", "wind") %}
            mdi:weather-windy
          {% elif is_state("sensor.dark_sky_icon", "fog") %}
            mdi:weather-fog
          {% elif is_state("sensor.dark_sky_icon", "partly-cloudy-day") %}
            mdi:weather-partlycloudy
          {% elif is_state("sensor.dark_sky_icon", "partly-cloudy-night") %}
            mdi:weather-partlycloudy            
          {% else %}
            error
          {% endif %}  

switch:
  - platform: template
    switches:
      sonoff_1:
        value_template: "{{ states.input_boolean.christmas_tree.state == 'on' }}"
        turn_on:
          service: script.christmastree_on
        turn_off:
          service: script.christmastree_off

input_boolean:
  sonoff_1:
    name: Sonoff 1
    initial: off
  christmas_tree:
    name: Christmas Tree
    initial: off

# Cloud
cloud:

# Gestione spazzatura
home_recycling:
  calendar: /config/custom_components/home_recycling/home_recycling_calendar.json

# Downloader MagPi
magpi_downloader:
  config_file: /config/custom_components/magpi_downloader/magpi_downloader_config.json
  output_path: /magpi

# configurazione bot Telegram
telegram_bot:
  - platform: polling
    api_key: !secret telegram_key
    allowed_chat_ids:
      - !secret telegram_chat_andrea 
      - !secret telegram_chat_erica
      - !secret telegram_chat_home

# Notifiche
notify:
  - name: ANDREA_TG
    platform: telegram
    chat_id: !secret telegram_chat_andrea
  - name: HOME_TG
    platform: telegram
    chat_id: !secret telegram_chat_home
  - name: PUSHOVER
    platform: pushover
    api_key: !secret pushover_api_key
    user_key: !secret pushover_user_key

media_player:
  - platform: samsungtv
    name: TV Salotto
    host: !secret ip_tv_salotto
    mac: !secret mac_tv_samsung
    port: 8001
  - platform: plex

cast:
  media_player:
    - host: !secret ip_chromecast_cucina
    - host: !secret ip_google_home

camera:
  - platform: yi
    name: Soggiorno
    host: !secret ip_mi_camera
    password: !secret yi_camera_password

vacuum:
  - platform: xiaomi_miio
    name: mi_roborock
    host: !secret ip_xiaomi_robot
    token: !secret mi_vacuum_token

# IFTTT
ifttt:
  key: !secret ifttt_key


group: !include groups.yaml
automation: !include automations.yaml
script: !include scripts.yaml
